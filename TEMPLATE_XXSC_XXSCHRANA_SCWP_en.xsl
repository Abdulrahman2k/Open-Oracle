<?xml version = '1.0' encoding = 'utf-8'?>
<!-- $Header: TEMPLATE_XXSC_XXSCHRANA_SCWP_en.xsl 115.0 2016/05/23 09:25:39 xdouser noship $ -->
<!-- dbdrv: none -->

<!--Generated by Oracle BI Publisher 10.1.3.4.2-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:ora="http://www.oracle.com/XSL/Transform/java/" xmlns:xdofo="http://xmlns.oracle.com/oxp/fo/extensions" xmlns:xdoxslt="http://www.oracle.com/XSL/Transform/java/oracle.apps.xdo.template.rtf.XSLTFunctions" xmlns:xdoxliff="urn:oasis:names:tc:xliff:document:1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:OutBoundPayments="http://xmlns.oracle.com/iby/EFTTemplateSample" xmlns:General="http://xmlns.oracle.com/iby" xmlns:Address="http://xmlns.oracle.com/iby/address" xmlns:PaymentsCommon="http://xmlns.oracle.com/iby/PaymentsCommon" xmlns:xdoeft="http://xmlns.oracle.com/iby/xdoeft">
   <xsl:output method="text" encoding="iso-8859-1"/>
   <xsl:param name="_XDOCTX">#</xsl:param>
   <xsl:decimal-format name="_DECIMALFORMAT" grouping-separator="," decimal-separator="."/>
   <xsl:template match="/">
      <!--Startup: Init Record Counters-->
      <xsl:call-template name="_RECORDCOUNTER"/>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'MESSAGE', string(''))"/>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'MESSAGETEMPLATES', string(''))"/>
      <!--Control: ================ Start new level: G_EDR=================-->
      <xsl:for-each select=".//G_EDR" xdoeft:type="LEVEL" xdoeft:level-name="G_EDR">
         <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1',  string(''))"/>
         <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1L',  number(0))"/>
         <!--Control: ===== START RECORD: Bank Details =====-->
         <!--Render: RECORD TYPE-->
         <xsl:call-template name="L1R1P3S0"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P3S0'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R1P1S1"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P1S1'))"/>
         <!--Render: EMPLOYEE UNIQUE ID-->
         <xsl:call-template name="L1R1P14S2"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P14S2'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R1P1S3"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P1S3'))"/>
         <!--Render: 9 DIGIT CODE GIVEN BY CBUAE-->
         <xsl:call-template name="L1R1P9S4"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P9S4'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R1P1S5"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P1S5'))"/>
         <!--Render: EMPLOYEE ACCOUNT WITH AGENT-->
         <xsl:call-template name="L1R1P23S6"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P23S6'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R1P1S7"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P1S7'))"/>
         <!--Render: START_DATE-->
         <xsl:call-template name="L1R1P10S8"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P10S8'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R1P1S9"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P1S9'))"/>
         <!--Render: END_DATE-->
         <xsl:call-template name="L1R1P10S10"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P10S10'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R1P1S11"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P1S11'))"/>
         <!--Render: DAYS IN PERIOD-->
         <xsl:call-template name="L1R1P4S12"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P4S12'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R1P1S13"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P1S13'))"/>
         <!--Render: INCOME FIXED COMPONENT-->
         <xsl:call-template name="L1R1P15S14"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P15S14'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R1P1S15"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P1S15'))"/>
         <!--Render: INCOME VARIABLE COMPONENT-->
         <xsl:call-template name="L1R1P15S16"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P15S16'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R1P1S17"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P1S17'))"/>
         <!--Render: DAYS ON LEAVE-->
         <xsl:call-template name="L1R1P4S18"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P4S18'))"/>
         <xsl:value-of select="xdoxslt:get_variable($_XDOCTX, 'L1R1')"/>
         <!--Control: ===== END RECORD: Bank Details =====-->
         <!--Control: ===== Record Break =====-->
         <xsl:call-template name="_RECORDBREAK"/>
         <!--Control: Increase record counter: Bank Details-->
         <xsl:value-of select="xdoxslt:next_sequence_number($_XDOCTX, 'Bank Details_RC')"/>
      </xsl:for-each>
      <!--Control: ================ Start new level: XXSCHRANA_SCWP=================-->
      <xsl:for-each select=".//XXSCHRANA_SCWP" xdoeft:type="LEVEL" xdoeft:level-name="XXSCHRANA_SCWP">
         <!--Render: <COMMENTS>-->
         <xsl:call-template name="L1R1P-1S19"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R1', xdoxslt:get_variable($_XDOCTX, 'L1R1P-1S19'))"/>
         <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2',  string(''))"/>
         <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2L',  number(0))"/>
         <!--Control: ===== START RECORD: Bank Details =====-->
         <!--Render: RECORD TYPE-->
         <xsl:call-template name="L1R2P3S20"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P3S20'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R2P1S21"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P1S21'))"/>
         <!--Render: EMPLOYER UNIQUE ID-->
         <xsl:call-template name="L1R2P13S22"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P13S22'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R2P1S23"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P1S23'))"/>
         <!--Render: BANK CODE OF EMPLOYER-->
         <xsl:call-template name="L1R2P9S24"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P9S24'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R2P1S25"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P1S25'))"/>
         <!--Render: FILE CREATION DATE-->
         <xsl:call-template name="L1R2P10S26"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P10S26'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R2P1S27"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P1S27'))"/>
         <!--Render: FILE CREATION TIME-->
         <xsl:call-template name="L1R2P15S28"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P15S28'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R2P1S29"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P1S29'))"/>
         <!--Render: SALARY_MONTH-->
         <xsl:call-template name="L1R2P6S30"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P6S30'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R2P1S31"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P1S31'))"/>
         <!--Render: EDR COUNT-->
         <xsl:call-template name="L1R2P10S32"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P10S32'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R2P1S33"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P1S33'))"/>
         <!--Render: TOTAL SALARY-->
         <xsl:call-template name="L1R2P15S34"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P15S34'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R2P1S35"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P1S35'))"/>
         <!--Render: PAYMENT CURRENCY-->
         <xsl:call-template name="L1R2P3S36"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P3S36'))"/>
         <!--Render: -->
         <xsl:call-template name="L1R2P1S37"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P1S37'))"/>
         <!--Render: Documentary Field-->
         <xsl:call-template name="L1R2P35S38"/>
         <xsl:value-of select="xdoxslt:append_to($_XDOCTX, 'L1R2', xdoxslt:get_variable($_XDOCTX, 'L1R2P35S38'))"/>
         <xsl:value-of select="xdoxslt:get_variable($_XDOCTX, 'L1R2')"/>
         <!--Control: ===== END RECORD: Bank Details =====-->
         <!--Control: ===== Record Break =====-->
         <xsl:call-template name="_RECORDBREAK"/>
         <!--Control: Increase record counter: Bank Details-->
         <xsl:value-of select="xdoxslt:next_sequence_number($_XDOCTX, 'Bank Details_RC')"/>
      </xsl:for-each>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'MESSAGE1', xdoxslt:removeAll(string(xdoxslt:get_variable($_XDOCTX, 'MESSAGETEMPLATES')), string(xdoxslt:get_variable($_XDOCTX, 'MESSAGE'))))"/>
      <xsl:variable name="MESSAGELENGTH" select="string-length(xdoxslt:get_variable($_XDOCTX, 'MESSAGE1'))"/>
      <xsl:value-of select="xdoxslt:get_variable($_XDOCTX, 'MESSAGE')"/>
   </xsl:template>
   <xsl:template name="_RECORDCOUNTER">
      <!--Record Counter Init-->
      <!--Definition: Bank Details_RC-->
      <xsl:call-template name="SEQ_START_Bank Details_RC"/>
      <xsl:value-of select="xdoxslt:create_sequence_number($_XDOCTX, string('Bank Details_RC'), number(1), number(999999), xdoxslt:get_variable($_XDOCTX, 'SEQ_START_Bank Details_RC_V'), number(1))"/>
   </xsl:template>
   <xsl:template name="SEQ_START_Bank Details_RC">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: 0-->
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'SEQ_START_Bank Details_RC_V', 0)"/>
   </xsl:template>
   <xsl:template name="L1R1P3S0">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((EDR)),'NONE')-->
      <xsl:variable name="v1" select="string(xdoxslt:normalize_string($_XDOCTX, .//EDR))"/>
      <xsl:variable name="v2" select="xdoxslt:convert_case(string($v1), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v2))>3">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v3', substring(string($v2), 1,3))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v3', $v2)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P3S0', xdoxslt:get_variable($_XDOCTX, '$v3'))"/>
   </xsl:template>
   <xsl:template name="L1R1P1S1">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v4" select="string(',')"/>
      <xsl:variable name="v5" select="xdoxslt:convert_case(string($v4), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v5))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v6', substring(string($v5), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v6', $v5)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P1S1', xdoxslt:get_variable($_XDOCTX, '$v6'))"/>
   </xsl:template>
   <xsl:template name="L1R1P14S2">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((DOCUMENT_NUMBER)),'NONE')-->
      <xsl:variable name="v7" select="string(xdoxslt:normalize_string($_XDOCTX, .//DOCUMENT_NUMBER))"/>
      <xsl:variable name="v8" select="xdoxslt:convert_case(string($v7), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v8))>14">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v9', substring(string($v8), 1,14))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v9', $v8)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P14S2', xdoxslt:get_variable($_XDOCTX, '$v9'))"/>
   </xsl:template>
   <xsl:template name="L1R1P1S3">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v10" select="string(',')"/>
      <xsl:variable name="v11" select="xdoxslt:convert_case(string($v10), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v11))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v12', substring(string($v11), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v12', $v11)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P1S3', xdoxslt:get_variable($_XDOCTX, '$v12'))"/>
   </xsl:template>
   <xsl:template name="L1R1P9S4">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((BANK_ROUTING_CODE)),'NONE')-->
      <xsl:variable name="v13" select="string(xdoxslt:normalize_string($_XDOCTX, .//BANK_ROUTING_CODE))"/>
      <xsl:variable name="v14" select="xdoxslt:convert_case(string($v13), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v14))>9">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v15', substring(string($v14), 1,9))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v15', $v14)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P9S4', xdoxslt:get_variable($_XDOCTX, '$v15'))"/>
   </xsl:template>
   <xsl:template name="L1R1P1S5">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v16" select="string(',')"/>
      <xsl:variable name="v17" select="xdoxslt:convert_case(string($v16), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v17))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v18', substring(string($v17), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v18', $v17)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P1S5', xdoxslt:get_variable($_XDOCTX, '$v18'))"/>
   </xsl:template>
   <xsl:template name="L1R1P23S6">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((IBAN)),'NONE')-->
      <xsl:variable name="v19" select="string(xdoxslt:normalize_string($_XDOCTX, .//IBAN))"/>
      <xsl:variable name="v20" select="xdoxslt:convert_case(string($v19), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v20))>23">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v21', substring(string($v20), 1,23))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v21', $v20)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P23S6', xdoxslt:get_variable($_XDOCTX, '$v21'))"/>
   </xsl:template>
   <xsl:template name="L1R1P1S7">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v22" select="string(',')"/>
      <xsl:variable name="v23" select="xdoxslt:convert_case(string($v22), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v23))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v24', substring(string($v23), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v24', $v23)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P1S7', xdoxslt:get_variable($_XDOCTX, '$v24'))"/>
   </xsl:template>
   <xsl:template name="L1R1P10S8">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((SALARY_DATE_FROM)),'NONE')-->
      <xsl:variable name="v25" select="string(xdoxslt:normalize_string($_XDOCTX, .//SALARY_DATE_FROM))"/>
      <xsl:variable name="v26" select="xdoxslt:convert_case(string($v25), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v26))>10">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v27', substring(string($v26), 1,10))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v27', $v26)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P10S8', xdoxslt:get_variable($_XDOCTX, '$v27'))"/>
   </xsl:template>
   <xsl:template name="L1R1P1S9">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v28" select="string(',')"/>
      <xsl:variable name="v29" select="xdoxslt:convert_case(string($v28), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v29))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v30', substring(string($v29), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v30', $v29)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P1S9', xdoxslt:get_variable($_XDOCTX, '$v30'))"/>
   </xsl:template>
   <xsl:template name="L1R1P10S10">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((SALARY_DATE_TO)),'NONE')-->
      <xsl:variable name="v31" select="string(xdoxslt:normalize_string($_XDOCTX, .//SALARY_DATE_TO))"/>
      <xsl:variable name="v32" select="xdoxslt:convert_case(string($v31), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v32))>10">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v33', substring(string($v32), 1,10))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v33', $v32)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P10S10', xdoxslt:get_variable($_XDOCTX, '$v33'))"/>
   </xsl:template>
   <xsl:template name="L1R1P1S11">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v34" select="string(',')"/>
      <xsl:variable name="v35" select="xdoxslt:convert_case(string($v34), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v35))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v36', substring(string($v35), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v36', $v35)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P1S11', xdoxslt:get_variable($_XDOCTX, '$v36'))"/>
   </xsl:template>
   <xsl:template name="L1R1P4S12">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: TO_NUMBER((NO_OF_DAYS))-->
      <xsl:variable name="v37" select="xdoxslt:to_number(xdoxslt:normalize_string($_XDOCTX, .//NO_OF_DAYS))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v37))>4">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v38', substring(string($v37), 1,4))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v38', $v37)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P4S12', xdoxslt:get_variable($_XDOCTX, '$v38'))"/>
   </xsl:template>
   <xsl:template name="L1R1P1S13">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v39" select="string(',')"/>
      <xsl:variable name="v40" select="xdoxslt:convert_case(string($v39), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v40))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v41', substring(string($v40), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v41', $v40)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P1S13', xdoxslt:get_variable($_XDOCTX, '$v41'))"/>
   </xsl:template>
   <xsl:template name="L1R1P15S14">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((FIXED_COMP)),'NONE')-->
      <xsl:variable name="v42" select="string(xdoxslt:normalize_string($_XDOCTX, .//FIXED_COMP))"/>
      <xsl:variable name="v43" select="xdoxslt:convert_case(string($v42), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v43))>15">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v44', substring(string($v43), 1,15))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v44', $v43)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P15S14', xdoxslt:get_variable($_XDOCTX, '$v44'))"/>
   </xsl:template>
   <xsl:template name="L1R1P1S15">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v45" select="string(',')"/>
      <xsl:variable name="v46" select="xdoxslt:convert_case(string($v45), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v46))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v47', substring(string($v46), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v47', $v46)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P1S15', xdoxslt:get_variable($_XDOCTX, '$v47'))"/>
   </xsl:template>
   <xsl:template name="L1R1P15S16">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((VARIABLE_COMP)),'NONE')-->
      <xsl:variable name="v48" select="string(xdoxslt:normalize_string($_XDOCTX, .//VARIABLE_COMP))"/>
      <xsl:variable name="v49" select="xdoxslt:convert_case(string($v48), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v49))>15">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v50', substring(string($v49), 1,15))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v50', $v49)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P15S16', xdoxslt:get_variable($_XDOCTX, '$v50'))"/>
   </xsl:template>
   <xsl:template name="L1R1P1S17">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v51" select="string(',')"/>
      <xsl:variable name="v52" select="xdoxslt:convert_case(string($v51), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v52))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v53', substring(string($v52), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v53', $v52)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P1S17', xdoxslt:get_variable($_XDOCTX, '$v53'))"/>
   </xsl:template>
   <xsl:template name="L1R1P4S18">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: TO_NUMBER((CF_LEAVE_DAYS))-->
      <xsl:variable name="v54" select="xdoxslt:to_number(xdoxslt:normalize_string($_XDOCTX, .//CF_LEAVE_DAYS))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v54))>4">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v55', substring(string($v54), 1,4))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v55', $v54)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R1P4S18', xdoxslt:get_variable($_XDOCTX, '$v55'))"/>
   </xsl:template>
   <xsl:template name="L1R1P-1S19">
      <!--Error: Unknown error [<DATA>]-->
   </xsl:template>
   <xsl:template name="L1R2P3S20">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR(('SCR')),'NONE')-->
      <xsl:variable name="v56" select="string('SCR')"/>
      <xsl:variable name="v57" select="xdoxslt:convert_case(string($v56), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v57))>3">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v58', substring(string($v57), 1,3))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v58', $v57)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P3S20', xdoxslt:get_variable($_XDOCTX, '$v58'))"/>
   </xsl:template>
   <xsl:template name="L1R2P1S21">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v59" select="string(',')"/>
      <xsl:variable name="v60" select="xdoxslt:convert_case(string($v59), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v60))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v61', substring(string($v60), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v61', $v60)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P1S21', xdoxslt:get_variable($_XDOCTX, '$v61'))"/>
   </xsl:template>
   <xsl:template name="L1R2P13S22">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR(('0000000200664')),'NONE')-->
      <xsl:variable name="v62" select="string('0000000200664')"/>
      <xsl:variable name="v63" select="xdoxslt:convert_case(string($v62), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v63))>13">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v64', substring(string($v63), 1,13))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v64', $v63)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P13S22', xdoxslt:get_variable($_XDOCTX, '$v64'))"/>
   </xsl:template>
   <xsl:template name="L1R2P1S23">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v65" select="string(',')"/>
      <xsl:variable name="v66" select="xdoxslt:convert_case(string($v65), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v66))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v67', substring(string($v66), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v67', $v66)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P1S23', xdoxslt:get_variable($_XDOCTX, '$v67'))"/>
   </xsl:template>
   <xsl:template name="L1R2P9S24">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((CF_BANK_ROUTING_CODE)),'NONE')-->
      <xsl:variable name="v68" select="string(xdoxslt:normalize_string($_XDOCTX, .//CF_BANK_ROUTING_CODE))"/>
      <xsl:variable name="v69" select="xdoxslt:convert_case(string($v68), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v69))>9">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v70', substring(string($v69), 1,9))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v70', $v69)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P9S24', xdoxslt:get_variable($_XDOCTX, '$v70'))"/>
   </xsl:template>
   <xsl:template name="L1R2P1S25">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v71" select="string(',')"/>
      <xsl:variable name="v72" select="xdoxslt:convert_case(string($v71), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v72))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v73', substring(string($v72), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v73', $v72)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P1S25', xdoxslt:get_variable($_XDOCTX, '$v73'))"/>
   </xsl:template>
   <xsl:template name="L1R2P10S26">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((CF_CREATION_DATE)),'NONE')-->
      <xsl:variable name="v74" select="string(xdoxslt:normalize_string($_XDOCTX, .//CF_CREATION_DATE))"/>
      <xsl:variable name="v75" select="xdoxslt:convert_case(string($v74), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v75))>10">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v76', substring(string($v75), 1,10))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v76', $v75)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P10S26', xdoxslt:get_variable($_XDOCTX, '$v76'))"/>
   </xsl:template>
   <xsl:template name="L1R2P1S27">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v77" select="string(',')"/>
      <xsl:variable name="v78" select="xdoxslt:convert_case(string($v77), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v78))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v79', substring(string($v78), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v79', $v78)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P1S27', xdoxslt:get_variable($_XDOCTX, '$v79'))"/>
   </xsl:template>
   <xsl:template name="L1R2P15S28">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((CF_TIME)),'NONE')-->
      <xsl:variable name="v80" select="string(xdoxslt:normalize_string($_XDOCTX, .//CF_TIME))"/>
      <xsl:variable name="v81" select="xdoxslt:convert_case(string($v80), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v81))>15">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v82', substring(string($v81), 1,15))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v82', $v81)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P15S28', xdoxslt:get_variable($_XDOCTX, '$v82'))"/>
   </xsl:template>
   <xsl:template name="L1R2P1S29">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v83" select="string(',')"/>
      <xsl:variable name="v84" select="xdoxslt:convert_case(string($v83), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v84))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v85', substring(string($v84), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v85', $v84)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P1S29', xdoxslt:get_variable($_XDOCTX, '$v85'))"/>
   </xsl:template>
   <xsl:template name="L1R2P6S30">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((CF_SALARY_MONTH)),'NONE')-->
      <xsl:variable name="v86" select="string(xdoxslt:normalize_string($_XDOCTX, .//CF_SALARY_MONTH))"/>
      <xsl:variable name="v87" select="xdoxslt:convert_case(string($v86), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v87))>6">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v88', substring(string($v87), 1,6))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v88', $v87)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P6S30', xdoxslt:get_variable($_XDOCTX, '$v88'))"/>
   </xsl:template>
   <xsl:template name="L1R2P1S31">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v89" select="string(',')"/>
      <xsl:variable name="v90" select="xdoxslt:convert_case(string($v89), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v90))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v91', substring(string($v90), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v91', $v90)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P1S31', xdoxslt:get_variable($_XDOCTX, '$v91'))"/>
   </xsl:template>
   <xsl:template name="L1R2P10S32">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: TO_NUMBER((CS_COUNT))-->
      <xsl:variable name="v92" select="xdoxslt:to_number(xdoxslt:normalize_string($_XDOCTX, .//CS_COUNT))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v92))>10">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v93', substring(string($v92), 1,10))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v93', $v92)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P10S32', xdoxslt:get_variable($_XDOCTX, '$v93'))"/>
   </xsl:template>
   <xsl:template name="L1R2P1S33">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v94" select="string(',')"/>
      <xsl:variable name="v95" select="xdoxslt:convert_case(string($v94), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v95))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v96', substring(string($v95), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v96', $v95)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P1S33', xdoxslt:get_variable($_XDOCTX, '$v96'))"/>
   </xsl:template>
   <xsl:template name="L1R2P15S34">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: TO_NUMBER((CS_NET))-->
      <xsl:variable name="v97" select="xdoxslt:to_number(xdoxslt:normalize_string($_XDOCTX, .//CS_NET))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v97))>15">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v98', substring(string($v97), 1,15))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v98', $v97)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P15S34', xdoxslt:get_variable($_XDOCTX, '$v98'))"/>
   </xsl:template>
   <xsl:template name="L1R2P1S35">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v99" select="string(',')"/>
      <xsl:variable name="v100" select="xdoxslt:convert_case(string($v99), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v100))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v101', substring(string($v100), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v101', $v100)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P1S35', xdoxslt:get_variable($_XDOCTX, '$v101'))"/>
   </xsl:template>
   <xsl:template name="L1R2P3S36">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR(('AED')),'NONE')-->
      <xsl:variable name="v102" select="string('AED')"/>
      <xsl:variable name="v103" select="xdoxslt:convert_case(string($v102), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v103))>3">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v104', substring(string($v103), 1,3))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v104', $v103)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P3S36', xdoxslt:get_variable($_XDOCTX, '$v104'))"/>
   </xsl:template>
   <xsl:template name="L1R2P1S37">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((',')),'NONE')-->
      <xsl:variable name="v105" select="string(',')"/>
      <xsl:variable name="v106" select="xdoxslt:convert_case(string($v105), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v106))>1">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v107', substring(string($v106), 1,1))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v107', $v106)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P1S37', xdoxslt:get_variable($_XDOCTX, '$v107'))"/>
   </xsl:template>
   <xsl:template name="L1R2P35S38">
      <xsl:param name="index" select="string(position())"/>
      <!--Expression: CONVERT_CASE(TO_CHAR((NULL)),'NONE')-->
      <xsl:variable name="v108" select="string('')"/>
      <xsl:variable name="v109" select="string($v108)"/>
      <xsl:variable name="v110" select="xdoxslt:convert_case(string($v109), string('NONE'))"/>
      <xsl:choose>
         <xsl:when test="string-length(string($v110))>35">
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v111', substring(string($v110), 1,35))"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'$v111', $v110)"/>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'L1R2P35S38', xdoxslt:get_variable($_XDOCTX, '$v111'))"/>
   </xsl:template>
   <xsl:template name="_RECORDBREAK">
      <!--Record Break-->
      <xsl:variable name="RECORDBREAK" select="concat(xdoxslt:chr(13), xdoxslt:chr(10))"/>
      <xsl:value-of select="xdoxslt:set_variable($_XDOCTX, 'RECORD_BREAK_LENGTH',string-length($RECORDBREAK))"/>
      <xsl:value-of select="string($RECORDBREAK)"/>
   </xsl:template>
   <xsl:template name="_BLOCK_FILLER">
      <!--Block Filler-->
      <xsl:param name="BLOCK_BEGIN"/>
      <xsl:param name="BLOCK_END"/>
      <xsl:param name="BLOCK_SPAN"/>
      <xsl:param name="BLOCK_FILL_CHAR"/>
      <xsl:param name="BLOCK_RECORD_LENGTH"/>
      <xsl:param name="RECORD_BREAK_LENGTH"/>
      <xsl:param name="BLOCK_RECORD_COUNTER"/>
      <xsl:if test="number(string-length($BLOCK_END) - string-length($BLOCK_BEGIN) - number($BLOCK_RECORD_COUNTER) * number($RECORD_BREAK_LENGTH)) mod (number($BLOCK_SPAN) * number($BLOCK_RECORD_LENGTH)) > 0">
         <xsl:value-of select="xdoxslt:set_variable($_XDOCTX,'MESSAGE', xdoxslt:fill_block($BLOCK_END, $BLOCK_FILL_CHAR, $BLOCK_RECORD_LENGTH))"/>
         <xsl:call-template name="_RECORDBREAK"/>
         <xsl:call-template name="_BLOCK_FILLER">
            <xsl:with-param name="BLOCK_BEGIN" select="string($BLOCK_BEGIN)"/>
            <xsl:with-param name="BLOCK_END" select="string(xdoxslt:get_variable($_XDOCTX, 'MESSAGE'))"/>
            <xsl:with-param name="BLOCK_SPAN" select="$BLOCK_SPAN"/>
            <xsl:with-param name="BLOCK_FILL_CHAR" select="$BLOCK_FILL_CHAR"/>
            <xsl:with-param name="BLOCK_RECORD_LENGTH" select="$BLOCK_RECORD_LENGTH"/>
            <xsl:with-param name="RECORD_BREAK_LENGTH" select="$RECORD_BREAK_LENGTH"/>
            <xsl:with-param name="BLOCK_RECORD_COUNTER" select="number($BLOCK_RECORD_COUNTER) + number(1)"/>
         </xsl:call-template>
      </xsl:if>
   </xsl:template>
</xsl:stylesheet>
